---
description: 
globs: 
alwaysApply: false
---
# Frontend Page Rule

When creating React/Next.js pages, follow these patterns from existing codebase:

## REQUIRED Structure (Option 1: Component)
```tsx
"use client"
import { useState } from 'react'
import { useAuth, withAuth } from '@/contexts/AuthContext'
import { useToast } from '@/hooks/use-toast'
import { PageLayout, LoadingPage } from '@/components/PageLayout'

function PageName() {
  const { user } = useAuth()
  const { toast } = useToast()
  const [loading, setLoading] = useState(true)
  
  if (loading) return <LoadingPage />
  
  return (
    <PageLayout>
      {/* content */}
    </PageLayout>
  )
}

export default withAuth(PageName) // Use for protected pages
```

## REQUIRED Structure (Option 2: Custom Classes)
```tsx
"use client"
import { useState } from 'react'
import { useAuth, withAuth } from '@/contexts/AuthContext'
import { useToast } from '@/hooks/use-toast'

function PageName() {
  const { user } = useAuth()
  const { toast } = useToast()
  const [loading, setLoading] = useState(true)
  
  return (
    <div className="app-page">
      <div className="app-container">
        {/* content */}
      </div>
    </div>
  )
}

export default withAuth(PageName) // Use for protected pages
```

## REQUIRED API Response Pattern
**CRITICAL**: All API responses are wrapped in this structure:
```json
{
  "success": true,
  "data": {
    // actual data here
  },
  "timestamp": "2025-06-23T16:20:21.085Z"
}
```

**Always access data using `.data` property:**
```tsx
const response = await fetch('/api/endpoint')
const result = await response.json()

// ✅ CORRECT - Access via .data
const items = result.data.items
const families = result.data.families
const user = result.data.user

// ❌ WRONG - Direct access will fail
const items = result.items // undefined!
```

## REQUIRED State Pattern
```tsx
const [loading, setLoading] = useState(true)
const [error, setError] = useState<string | null>(null)

const fetchData = async () => {
  setLoading(true)
  try {
    const response = await fetch('/api/endpoint')
    const result = await response.json()
    
    if (result.success) {
      // ✅ ALWAYS use .data to access actual content
      const actualData = result.data
      setData(actualData.items || actualData.families || actualData)
    } else {
      toast({
        title: 'Error',
        description: result.error?.message || 'Operation failed',
        variant: 'destructive'
      })
    }
  } catch (error) {
    toast({ title: 'Error', description: 'Network error', variant: 'destructive' })
  } finally {
    setLoading(false)
  }
}
```

## REQUIRED API Error Handling
```tsx
if (response.ok) {
  const result = await response.json()
  console.log('API Response:', result)
  console.log('Actual Data:', result.data)
  
  // Use result.data to access the actual content
  setData(result.data.items || result.data.families || result.data)
} else {
  console.error('API Error:', response.status, response.statusText)
  const errorText = await response.text()
  console.error('Error details:', errorText)
  
  toast({
    title: 'Error',
    description: `API request failed: ${response.status}`,
    variant: 'destructive'
  })
}
```

## REQUIRED Styles (Custom Classes Available)
- **Page Background**: `app-page` (replaces long gradient classes)
- **Container**: `app-container` (replaces max-w-7xl mx-auto px-4 py-8)
- **Brand Buttons**: `btn-primary` (includes hover states and transitions)
- **Brand Text**: `text-brand` (includes gradient and bold styling)
- **Cards**: `card-default` (standard card styling)
- **Icon Containers**: `icon-brand` + `<Icon className="w-8 h-8 text-white" />`
- **Loading Spinner**: `loading-spinner`
- **Loading Page**: `loading-page`

## REQUIRED Loading State
```tsx
// Option 1: Use LoadingPage component
if (loading) return <LoadingPage message="Loading data..." />

// Option 2: Use custom classes
if (loading) {
  return (
    <div className="loading-page">
      <div className="text-center">
        <div className="loading-spinner mx-auto mb-4"></div>
        <p>Loading...</p>
      </div>
    </div>
  )
}
```

## DO
- Use shadcn/ui components
- Use Lucide React icons
- Import: `import { Icon } from 'lucide-react'`
- Add `"use client"` to interactive pages
- Use `useToast()` for all user feedback
- Use TypeScript interfaces for data
- Export protected pages with `withAuth(Component)`
- **ALWAYS access API data via `.data` property**
- Add console.log for API responses during development
- ALWAYS use the tailwind.config.ts for styling

## DON'T
- Create pages without the required background/container structure
- Use colors other than the purple/pink gradient brand colors
- Skip loading states
- Skip error handling with toast notifications
- Use inline styles instead of Tailwind classes
- **NEVER access API response data directly without `.data`**

- Forget to handle both success and error cases in API calls 