// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication fields
  emailVerified     Boolean   @default(false)
  emailVerifyToken  String?   @unique
  resetPasswordToken String?  @unique
  resetPasswordExpires DateTime?
  
  // Account lockout fields
  failedLoginAttempts Int       @default(0)
  lockoutUntil       DateTime?
  
  // Session management
  refreshTokens RefreshToken[]

  // Relationships
  familyMembers    FamilyMember[]
  wishlistItems    WishlistItem[]
  itemReservations ItemReservation[]

  @@map("users")
}

model Family {
  id          String   @id @default(cuid())
  name        String
  inviteCode  String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  members    FamilyMember[]
  categories Category[]

  @@map("families")
}

model FamilyMember {
  id       String   @id @default(cuid())
  userId   String
  familyId String
  role     String   @default("MEMBER")
  status   String   @default("ACTIVE")
  joinedAt DateTime @default(now())

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
  @@map("family_members")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  familyId    String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  family        Family         @relation(fields: [familyId], references: [id], onDelete: Cascade)
  wishlistItems WishlistItem[]

  @@unique([name, familyId])
  @@map("categories")
}

model WishlistItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Decimal?
  productUrl  String?
  imageUrl    String?
  priority    String   @default("MEDIUM")
  notes       String?
  userId      String
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category          @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  reservations ItemReservation[]
  priceHistory PriceHistory[]

  @@map("wishlist_items")
}

model ItemReservation {
  id             String   @id @default(cuid())
  wishlistItemId String
  userId         String
  status         String   @default("RESERVED")
  purchaseNotes  String?
  reservedAt     DateTime @default(now())
  purchasedAt    DateTime?

  // Relationships
  wishlistItem WishlistItem @relation(fields: [wishlistItemId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([wishlistItemId]) // Only one reservation per item
  @@map("item_reservations")
}

model PriceHistory {
  id             String   @id @default(cuid())
  wishlistItemId String
  price          Decimal
  recordedAt     DateTime @default(now())

  // Relationships
  wishlistItem WishlistItem @relation(fields: [wishlistItemId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Note: SQLite doesn't support enums, so we use strings instead
// Valid values for role: "ADMIN", "MEMBER"
// Valid values for status: "ACTIVE", "INACTIVE", "PENDING"  
// Valid values for priority: "LOW", "MEDIUM", "HIGH", "URGENT"
// Valid values for reservation status: "RESERVED", "PURCHASED", "CANCELLED" 